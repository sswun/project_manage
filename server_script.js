// ÊúçÂä°Âô®ÁâàÊú¨ÁöÑÊï∞ÊçÆÁÆ°ÁêÜ - project_managerÈ°πÁõÆÁÆ°ÁêÜÁ≥ªÁªü
// Êï∞ÊçÆ‰ªéÊúçÂä°Âô®Âä†ËΩΩÂíå‰øùÂ≠òÔºå‰∏ç‰æùËµñÊµèËßàÂô®localStorage

class ServerDataManager {
    constructor() {
        this.plans = [];
        this.projects = [];
        this.tasks = [];
        this.records = [];
        this.serverUrl = ''; // Ëá™Âä®Ê£ÄÊµãÊúçÂä°Âô®URL
        this.init();
    }

    init() {
        // Ê£ÄÊµãÊúçÂä°Âô®URL
        this.serverUrl = window.location.origin;
        console.log('ÊúçÂä°Âô®URL:', this.serverUrl);
    }

    // ‰ªéÊúçÂä°Âô®Âä†ËΩΩÊâÄÊúâÊï∞ÊçÆ
    async loadFromServer() {
        try {
            const response = await fetch(`${this.serverUrl}/api/data`);
            if (response.ok) {
                const data = await response.json();

                // È™åËØÅÊï∞ÊçÆÊ†ºÂºè
                if (!data || typeof data !== 'object') {
                    throw new Error('ÊúçÂä°Âô®ËøîÂõûÊï∞ÊçÆÊ†ºÂºèÈîôËØØ');
                }

                this.plans = Array.isArray(data.plans) ? data.plans : [];
                this.projects = Array.isArray(data.projects) ? data.projects : [];
                this.tasks = Array.isArray(data.tasks) ? data.tasks : [];
                this.records = Array.isArray(data.records) ? data.records : [];

                console.log('‚úÖ Êï∞ÊçÆ‰ªéÊúçÂä°Âô®Âä†ËΩΩÊàêÂäü');
                console.log(`üìä Âä†ËΩΩÁªüËÆ°: ËÆ°Âàí${this.plans.length}, È°πÁõÆ${this.projects.length}, ‰ªªÂä°${this.tasks.length}, ËÆ∞ÂΩï${this.records.length}`);
                return true;
            } else {
                console.error('‚ùå ‰ªéÊúçÂä°Âô®Âä†ËΩΩÊï∞ÊçÆÂ§±Ë¥•:', response.status, response.statusText);
                // ÁΩëÁªúÈîôËØØÊó∂Â∞ùËØï‰ΩøÁî®localStorage‰Ωú‰∏∫Â§á‰ªΩ
                return this.loadFromLocalStorage();
            }
        } catch (error) {
            console.error('‚ùå ÁΩëÁªúÈîôËØØ:', error.message);
            // ÁΩëÁªúÈîôËØØÊó∂Â∞ùËØï‰ΩøÁî®localStorage‰Ωú‰∏∫Â§á‰ªΩ
            return this.loadFromLocalStorage();
        }
    }

    // ‰øùÂ≠òÊï∞ÊçÆÂà∞ÊúçÂä°Âô®
    async saveToServer() {
        try {
            // Êï∞ÊçÆÈ™åËØÅ
            const dataToSave = {
                plans: this.plans || [],
                projects: this.projects || [],
                tasks: this.tasks || [],
                records: this.records || []
            };

            // Ê£ÄÊü•Êï∞ÊçÆÂ§ßÂ∞è
            const dataSize = JSON.stringify(dataToSave).length;
            if (dataSize > 10 * 1024 * 1024) { // 10MBÈôêÂà∂
                throw new Error('Êï∞ÊçÆÂ§™Â§ßÔºåËØ∑ÂáèÂ∞ëÊï∞ÊçÆÈáè');
            }

            const response = await fetch(`${this.serverUrl}/api/save`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(dataToSave)
            });

            if (response.ok) {
                const result = await response.json();
                if (result.status === 'success') {
                    console.log('‚úÖ Êï∞ÊçÆ‰øùÂ≠òÂà∞ÊúçÂä°Âô®ÊàêÂäü:', result.message);
                    return true;
                } else {
                    console.error('‚ùå ÊúçÂä°Âô®‰øùÂ≠òÂ§±Ë¥•:', result.message);
                    return false;
                }
            } else {
                console.error('‚ùå ‰øùÂ≠òÂà∞ÊúçÂä°Âô®Â§±Ë¥•:', response.status, response.statusText);
                return false;
            }
        } catch (error) {
            console.error('‚ùå ‰øùÂ≠òÂà∞ÊúçÂä°Âô®ÈîôËØØ:', error.message);
            // ÁΩëÁªúÈîôËØØÊó∂‰øùÂ≠òÂà∞localStorage‰Ωú‰∏∫Â§á‰ªΩ
            return this.saveToLocalStorage();
        }
    }

    // localStorageÂ§á‰ªΩÂäüËÉΩ
    loadFromLocalStorage() {
        try {
            const storedData = localStorage.getItem('projectManagerData');
            if (storedData) {
                const data = JSON.parse(storedData);
                this.plans = data.plans || [];
                this.projects = data.projects || [];
                this.tasks = data.tasks || [];
                this.records = data.records || [];
                console.log('‚ö†Ô∏è ‰ΩøÁî®localStorageÂ§á‰ªΩÊï∞ÊçÆ');
                return true;
            }
        } catch (e) {
            console.error('localStorageÂä†ËΩΩÂ§±Ë¥•:', e);
        }
        return false;
    }

    saveToLocalStorage() {
        try {
            localStorage.setItem('projectManagerData', JSON.stringify({
                plans: this.plans,
                projects: this.projects,
                tasks: this.tasks,
                records: this.records
            }));
            console.log('üíæ Êï∞ÊçÆÂ∑≤Â§á‰ªΩÂà∞localStorage');
            return true;
        } catch (e) {
            console.error('localStorage‰øùÂ≠òÂ§±Ë¥•:', e);
            return false;
        }
    }

    // Êï∞ÊçÆÊìç‰ΩúÊñπÊ≥ï
    addPlan(plan) {
        plan.id = this.generateId();
        plan.createdAt = new Date().toISOString();
        this.plans.push(plan);
        return this.saveToServer();
    }

    updatePlan(planId, planData) {
        const index = this.plans.findIndex(p => p.id === planId);
        if (index !== -1) {
            this.plans[index] = { ...this.plans[index], ...planData };
            return this.saveToServer();
        }
        return false;
    }

    deletePlan(planId) {
        const planIndex = this.plans.findIndex(p => p.id === planId);
        if (planIndex !== -1) {
            this.plans.splice(planIndex, 1);
            // Ê∏ÖÈô§È°πÁõÆ‰∏≠ÁöÑËÆ°ÂàíÂÖ≥ËÅîÔºåÂπ∂Êõ¥Êñ∞È°πÁõÆÁä∂ÊÄÅ
            this.projects.forEach(project => {
                if (project.planId === planId) {
                    project.planId = '';
                    // Â¶ÇÊûúÈ°πÁõÆÁä∂ÊÄÅÊòØËÆ°Âàí‰∏≠ÔºåÊîπ‰∏∫ËøõË°å‰∏≠
                    if (project.status === 'planning') {
                        project.status = 'active';
                    }
                }
            });
            return this.saveToServer();
        }
        return false;
    }

    addProject(project) {
        project.id = this.generateId();
        project.createdAt = new Date().toISOString();
        this.projects.push(project);
        return this.saveToServer();
    }

    updateProject(projectId, projectData) {
        const index = this.projects.findIndex(p => p.id === projectId);
        if (index !== -1) {
            this.projects[index] = { ...this.projects[index], ...projectData };
            return this.saveToServer();
        }
        return false;
    }

    deleteProject(projectId) {
        const index = this.projects.findIndex(p => p.id === projectId);
        if (index !== -1) {
            // Âà†Èô§È°πÁõÆÁöÑÊâÄÊúâ‰ªªÂä°
            this.tasks = this.tasks.filter(t => t.projectId !== projectId);
            this.projects.splice(index, 1);
            return this.saveToServer();
        }
        return false;
    }

    addTask(task) {
        task.id = this.generateId();
        task.createdAt = new Date().toISOString();
        this.tasks.push(task);
        return this.saveToServer();
    }

    updateTask(taskId, taskData) {
        const index = this.tasks.findIndex(t => t.id === taskId);
        if (index !== -1) {
            this.tasks[index] = { ...this.tasks[index], ...taskData };
            return this.saveToServer();
        }
        return false;
    }

    deleteTask(taskId) {
        const index = this.tasks.findIndex(t => t.id === taskId);
        if (index !== -1) {
            this.tasks.splice(index, 1);
            return this.saveToServer();
        }
        return false;
    }

    addRecord(record) {
        record.id = this.generateId();
        record.uploadDate = new Date().toISOString();
        this.records.push(record);
        return this.saveToServer();
    }

    deleteRecord(recordId) {
        const index = this.records.findIndex(r => r.id === recordId);
        if (index !== -1) {
            const deletedRecord = this.records[index];
            this.records.splice(index, 1);

            // ÂêåÊ≠•ÂÖ®Â±ÄÂèòÈáè
            syncGlobalVariables();

            // Á´ãÂç≥‰øùÂ≠òÂà∞ÊúçÂä°Âô®
            return this.saveToServer().then(success => {
                if (success) {
                    console.log('‚úÖ ËÆ∞ÂΩïÂà†Èô§ÊàêÂäü:', deletedRecord.name);
                    return true;
                } else {
                    console.error('‚ùå ËÆ∞ÂΩïÂà†Èô§Â§±Ë¥•ÔºåÊ≠£Âú®ÊÅ¢Â§ç...');
                    // Â¶ÇÊûú‰øùÂ≠òÂ§±Ë¥•ÔºåÊÅ¢Â§çËÆ∞ÂΩï
                    this.records.splice(index, 0, deletedRecord);
                    syncGlobalVariables();
                    return false;
                }
            });
        }
        return Promise.resolve(false);
    }

    generateId() {
        return 'id_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    // ÂØºÂá∫Êï∞ÊçÆ
    exportData() {
        const data = {
            plans: this.plans,
            projects: this.projects,
            tasks: this.tasks,
            records: this.records,
            timestamp: new Date().toISOString(),
            version: '1.0.0'
        };

        const jsonData = JSON.stringify(data, null, 2);
        const blob = new Blob([jsonData], { type: 'application/json' });
        const url = URL.createObjectURL(blob);

        const link = document.createElement('a');
        link.href = url;
        link.download = `projects_export_${new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5)}.json`;
        link.click();

        setTimeout(() => URL.revokeObjectURL(url), 100);
    }

    // ÂØºÂÖ•Êï∞ÊçÆ
    async importData(file) {
        try {
            const text = await file.text();
            const data = JSON.parse(text);

            if (data.plans && data.projects && data.tasks && data.records) {
                this.plans = data.plans;
                this.projects = data.projects;
                this.tasks = data.tasks;
                this.records = data.records;

                const success = await this.saveToServer();
                if (success) {
                    return true;
                }
            }
            return false;
        } catch (error) {
            console.error('ÂØºÂÖ•Êï∞ÊçÆÂ§±Ë¥•:', error);
            return false;
        }
    }
}

// ÂàõÂª∫ÂÖ®Â±ÄÊï∞ÊçÆÁÆ°ÁêÜÂô®ÂÆû‰æã
const dataManager = new ServerDataManager();

// ‰∏∫‰∫ÜÂÖºÂÆπÁé∞Êúâ‰ª£Á†ÅÔºåÂàõÂª∫ÂÖ®Â±ÄÂèòÈáè
let plans = [];
let projects = [];
let tasks = [];
let records = [];

// ÂêåÊ≠•Êï∞ÊçÆÁÆ°ÁêÜÂô®‰∏≠ÁöÑÊï∞ÊçÆÂà∞ÂÖ®Â±ÄÂèòÈáè
function syncGlobalVariables() {
    plans = dataManager.plans;
    projects = dataManager.projects;
    tasks = dataManager.tasks;
    records = dataManager.records;
}

// ‰øùÂ≠òÊï∞ÊçÆÁöÑÂåÖË£ÖÂáΩÊï∞
async function saveToLocalStorage() {
    // ÂêåÊ≠•ÂÖ®Â±ÄÂèòÈáèÂà∞Êï∞ÊçÆÁÆ°ÁêÜÂô®
    dataManager.plans = plans;
    dataManager.projects = projects;
    dataManager.tasks = tasks;
    dataManager.records = records;

    const success = await dataManager.saveToServer();
    if (!success) {
        showNotification('Êï∞ÊçÆ‰øùÂ≠òÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•', 'error');
    }
    return success;
}

// Âä†ËΩΩÊï∞ÊçÆÁöÑÂåÖË£ÖÂáΩÊï∞
async function loadFromLocalStorage() {
    const success = await dataManager.loadFromServer();
    if (success) {
        syncGlobalVariables();

        // Á°Æ‰øùÈªòËÆ§ËÆ∞ÂΩïÂè™Âú®Ê≤°ÊúâËÆ∞ÂΩïÊó∂Ê∑ªÂä†
        if (records.length === 0) {
            await addDefaultRecords();
            syncGlobalVariables(); // ÂÜçÊ¨°ÂêåÊ≠•‰ª•ÂåÖÂê´ÈªòËÆ§ËÆ∞ÂΩï
        }

        updateDashboard();
        renderPlans();
        renderProjects();
        renderRecords();
        showNotification('Êï∞ÊçÆÂä†ËΩΩÊàêÂäü', 'success');
    } else {
        showNotification('Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•', 'error');
    }
    return success;
}

// Ê∑ªÂä†ÈªòËÆ§ÁöÑPDFËÆ∞ÂΩïÔºà‰ªÖÂú®Á¨¨‰∏ÄÊ¨°ÂàùÂßãÂåñÊó∂Ôºâ
async function addDefaultRecords() {
    const defaultFiles = [
        {
            id: 'default_3days_record_20251005',
            name: '3Â§©‰∏ÄÈò∂ÊÆµÂà∂Â∑•‰ΩúËÆ∞ÂΩïË°®20251005.pdf',
            size: 107109,
            type: 'application/pdf',
            uploadDate: new Date().toISOString(),
            path: './store/3Â§©‰∏ÄÈò∂ÊÆµÂà∂Â∑•‰ΩúËÆ∞ÂΩïË°®20251005.pdf',
            isDefault: true
        },
        {
            id: 'default_creative_direction_20251005',
            name: 'ÂàõÊÑèÂü∫Á°Ä‰∏éÂâçÊ≤øÊñπÂêë20251005.pdf',
            size: 2750350,
            type: 'application/pdf',
            uploadDate: new Date().toISOString(),
            path: './store/ÂàõÊÑèÂü∫Á°Ä‰∏éÂâçÊ≤øÊñπÂêë20251005.pdf',
            isDefault: true
        }
    ];

    let addedAny = false;

    // Âè™Ê∑ªÂä†ÈªòËÆ§ËÆ∞ÂΩïÔºåÂ¶ÇÊûúÁî®Êà∑Â∑≤ÊúâËÆ∞ÂΩïÂàôË∑≥Ëøá
    for (const file of defaultFiles) {
        if (!records.find(r => r.name === file.name || r.id === file.id)) {
            const success = await dataManager.addRecord(file);
            if (success) {
                addedAny = true;
                console.log('‚úÖ Ê∑ªÂä†ÈªòËÆ§ËÆ∞ÂΩï:', file.name);
            }
        }
    }

    if (addedAny) {
        // Â¶ÇÊûúÊ∑ªÂä†‰∫ÜÊñ∞ËÆ∞ÂΩïÔºåÂêåÊ≠•Âà∞ÂÖ®Â±ÄÂèòÈáè
        syncGlobalVariables();
        console.log('‚úÖ ÈªòËÆ§ËÆ∞ÂΩïÂàùÂßãÂåñÂÆåÊàê');
    }
}

// ÂØºÂá∫Êï∞ÊçÆ
function exportData() {
    dataManager.exportData();
    showNotification('Êï∞ÊçÆÂØºÂá∫ÊàêÂäüÔºÅ');
}

// ÈÄöÁü•Á≥ªÁªü
function showNotification(message, type = 'info') {
    // ÂàõÂª∫ÈÄöÁü•ÂÖÉÁ¥†
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
        <span>${message}</span>
    `;

    // Ê∑ªÂä†Âà∞È°µÈù¢
    document.body.appendChild(notification);

    // Âä®ÁîªÊòæÁ§∫
    setTimeout(() => notification.classList.add('show'), 100);

    // 3ÁßíÂêéËá™Âä®Ê∂àÂ§±
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => document.body.removeChild(notification), 300);
    }, 3000);
}

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', function() {
    // ÊòæÁ§∫Âä†ËΩΩÊèêÁ§∫
    showNotification('Ê≠£Âú®‰ªéÊúçÂä°Âô®Âä†ËΩΩÊï∞ÊçÆ...', 'info');

    // Âä†ËΩΩÊï∞ÊçÆ (ÈªòËÆ§ËÆ∞ÂΩïÁöÑÊ∑ªÂä†Â∑≤Âú®loadFromLocalStorage‰∏≠Â§ÑÁêÜ)
    loadFromLocalStorage();
});

console.log('üöÄ project_managerÈ°πÁõÆÁÆ°ÁêÜÁ≥ªÁªüÂ∑≤Âä†ËΩΩ');
console.log('üì° Êï∞ÊçÆÂ∞Ü‰ªéÊúçÂä°Âô®Âä®ÊÄÅÂä†ËΩΩÂíå‰øùÂ≠ò');